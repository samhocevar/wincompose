<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AutodetectLanguage" xml:space="preserve">
    <value>自動偵測</value>
  </data>
  <data name="KeyLMenu" xml:space="preserve">
    <value>左 Alt 鍵</value>
  </data>
  <data name="KeyRMenu" xml:space="preserve">
    <value>右 Alt 鍵</value>
  </data>
  <data name="KeyLControl" xml:space="preserve">
    <value>左 Control 鍵</value>
  </data>
  <data name="KeyRControl" xml:space="preserve">
    <value>右 Control 鍵</value>
  </data>
  <data name="KeyLWin" xml:space="preserve">
    <value>左 Windows 鍵</value>
  </data>
  <data name="KeyRWin" xml:space="preserve">
    <value>右 Windows 鍵</value>
  </data>
  <data name="KeyCapital" xml:space="preserve">
    <value>Caps Lock 鍵</value>
  </data>
  <data name="KeyNumLock" xml:space="preserve">
    <value>Num Lock 鍵</value>
  </data>
  <data name="KeyPause" xml:space="preserve">
    <value>Pause 鍵</value>
  </data>
  <data name="KeyApps" xml:space="preserve">
    <value>彈出功能表鍵</value>
  </data>
  <data name="KeyEscape" xml:space="preserve">
    <value>Esc 鍵</value>
  </data>
  <data name="KeyConvert" xml:space="preserve">
    <value>(日文) 变換鍵</value>
  </data>
  <data name="KeyNonConvert" xml:space="preserve">
    <value>(日文) 無变換鍵</value>
  </data>
  <data name="KeyScroll" xml:space="preserve">
    <value>Scroll Lock 鍵</value>
  </data>
  <data name="KeySpace" xml:space="preserve">
    <value>空格鍵</value>
  </data>
  <data name="KeyReturn" xml:space="preserve">
    <value>Return 鍵</value>
  </data>
  <data name="Composing" xml:space="preserve">
    <value>組合</value>
  </data>
  <data name="UseXorgRules" xml:space="preserve">
    <value>使用 Xorg 專案計畫的組合鍵</value>
  </data>
  <data name="UseXorgRulesToolTip" xml:space="preserve">
    <value>使用 Xorg 專案計畫 (http://www.x.org/) 的 3000 個組合鍵。這些是在標準 Linux 系統上最通用的組合鍵。</value>
  </data>
  <data name="UseXComposeRules" xml:space="preserve">
    <value>使用 XCompose 專案計畫的組合鍵</value>
  </data>
  <data name="UseXComposeRulesToolTip" xml:space="preserve">
    <value>使用 XCompose 開放源碼專案計畫 (https://github.com/kragen/xcompose) 的 1,000 個組合鍵。這些組合鍵有時會與 Xorg 的組合見衝突。</value>
  </data>
  <data name="UseEmojiRules" xml:space="preserve">
    <value>用 WinCompose 圖語 (emoji) 的組合鍵</value>
  </data>
  <data name="UseEmojiRulesToolTip" xml:space="preserve">
    <value>使用由 WinCompose 作者與貢獻者提供的圖語 (emoji) 組合鍵。</value>
  </data>
  <data name="DebugWindow" xml:space="preserve">
    <value>除錯窗</value>
  </data>
  <data name="ShowSequences" xml:space="preserve">
    <value>顯示組合鍵…</value>
  </data>
  <data name="Disable" xml:space="preserve">
    <value>停用</value>
  </data>
  <data name="Restart" xml:space="preserve">
    <value>重新啟動</value>
  </data>
  <data name="DonationPage" xml:space="preserve">
    <value>贊助頁</value>
  </data>
  <data name="VisitWebsite" xml:space="preserve">
    <value>拜訪網站</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>退出</value>
  </data>
  <data name="UnicodeCharacters" xml:space="preserve">
    <value>Unicode 字元</value>
  </data>
  <data name="Sequences" xml:space="preserve">
    <value>組合鍵</value>
  </data>
  <data name="SwapOnInvalid" xml:space="preserve">
    <value>嘗試交換兩鍵</value>
  </data>
  <data name="SwapOnInvalidToolTip" xml:space="preserve">
    <value>嘗試將先後按下的兩鍵交換。例如，若 首鍵 A E 是無效組合，就嘗試 首鍵 E A。</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>搜尋用的篩選規則:</value>
  </data>
  <data name="ComposeKey" xml:space="preserve">
    <value>首鍵:</value>
  </data>
  <data name="ComposeKeyToolTip" xml:space="preserve">
    <value>選擇作為組合鍵的首鍵。</value>
  </data>
  <data name="ResetTimeout" xml:space="preserve">
    <value>逾時</value>
  </data>
  <data name="UnicodeInput" xml:space="preserve">
    <value>進階 Unicode (內碼)輸入</value>
  </data>
  <data name="UnicodeInputToolTip" xml:space="preserve">
    <value>即使沒定義一 Unicode 字元的組合鍵，也可使用首鍵加上 Unicode (內碼)去輸入。例如，首鍵 U 1 A 3 F Enter，會輸出字元 U+1A3F</value>
  </data>
  <data name="InvalidSequences" xml:space="preserve">
    <value>出現無效按鍵組合時</value>
  </data>
  <data name="CaseInsensitive" xml:space="preserve">
    <value>退而忽略大小寫</value>
  </data>
  <data name="CaseInsensitiveToolTip" xml:space="preserve">
    <value>如果輸入的組合鍵不存在，但有一個只和它差在大小寫不同的組合鍵，則自動校正它，也就是忽略大小寫差異。</value>
  </data>
  <data name="DiscardOnInvalid" xml:space="preserve">
    <value>清除已按的字元</value>
  </data>
  <data name="DiscardOnInvalidToolTip" xml:space="preserve">
    <value>如果輸入的組合鍵不存在，則清除所有鍵入的字元。預設的做法是像未使用首鍵般地輸出字元。</value>
  </data>
  <data name="BeepOnInvalid" xml:space="preserve">
    <value>發出嗶聲</value>
  </data>
  <data name="BeepOnInvalidToolTip" xml:space="preserve">
    <value>如果輸入的系列不存在，則發出系統聲音。</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>介面語言:</value>
  </data>
  <data name="LanguageToolTip" xml:space="preserve">
    <value>選擇 WinCompose 用於介面的語言。預設情況下使用作業系統語言。</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>關閉</value>
  </data>
  <data name="CopyToClipboard" xml:space="preserve">
    <value>複製到剪貼簿</value>
  </data>
  <data name="Emoji" xml:space="preserve">
    <value>圖語</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>套用</value>
  </data>
  <data name="KeepOriginalKey" xml:space="preserve">
    <value>維持首鍵的原始功能</value>
  </data>
  <data name="KeepOriginalKeyToolTip" xml:space="preserve">
    <value>這讓 WinCompose 盡可能保持首鍵的原有功能。例如儘管 Alt 用作首鍵, Alt-Tab 快鍵仍然有效。</value>
  </data>
  <data name="InsertZwsp" xml:space="preserve">
    <value>使用 Office 應用軟體時插入零寬空格</value>
  </data>
  <data name="InsertZwspToolTip" xml:space="preserve">
    <value>輸入某些 Unicode 字元時，Microsoft Office 應用程式有時會錯誤地自動更改文件字型。此功能在 Unicode 字元之後插入一個不可見的字元來繞過此錯誤。</value>
  </data>
  <data name="EmulateCapsLock" xml:space="preserve">
    <value>用兩個 Shift 鍵模擬 Caps Lock 鍵</value>
  </data>
  <data name="EmulateCapsLockToolTip" xml:space="preserve">
    <value>若用 Caps Lock 作為首鍵，則它的原始功能會停止。同時按兩個 Shift 鍵相當於使出 Caps Lock 的原始功能。</value>
  </data>
  <data name="ShiftDisablesCapsLock" xml:space="preserve">
    <value>按 Shift 停用 Caps Lock 鍵</value>
  </data>
  <data name="ShiftDisablesCapsLockToolTip" xml:space="preserve">
    <value>若用 Caps Lock 作為首鍵，則它的原始功能會停止。此功能會使得按 Shift 鍵就可關掉 Caps Lock。</value>
  </data>
  <data name="CapsLockCapitalizes" xml:space="preserve">
    <value>Caps Lock 鍵總是會讓字母大寫</value>
  </data>
  <data name="CapsLockCapitalizesToolTip" xml:space="preserve">
    <value>當 Caps Lock 鍵啟用後，按像“é”之類的重音字母會輸出大寫的重音字母，於此則是“É”。</value>
  </data>
  <data name="Categories" xml:space="preserve">
    <value>分類</value>
  </data>
  <data name="InSelectedCategories" xml:space="preserve">
    <value>在所選的分類</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>選項 — WinCompose</value>
  </data>
  <data name="ShowOptions" xml:space="preserve">
    <value>選項…</value>
  </data>
  <data name="TrayToolTip" xml:space="preserve">
    <value>WinCompose v{2} {0} ({1} 個組合)</value>
  </data>
  <data name="General" xml:space="preserve">
    <value>一般</value>
  </data>
  <data name="Behavior" xml:space="preserve">
    <value>方式</value>
  </data>
  <data name="WindowTitle" xml:space="preserve">
    <value>組合鍵 — WinCompose</value>
  </data>
  <data name="UserMacros" xml:space="preserve">
    <value>使用者自訂巨集</value>
  </data>
  <data name="DisabledToolTip" xml:space="preserve">
    <value>已停用 WinCompose</value>
  </data>
  <data name="KeyInsert" xml:space="preserve">
    <value>Insert 鍵</value>
  </data>
  <data name="TestTyping" xml:space="preserve">
    <value>測試輸入</value>
  </data>
  <data name="Tweaks" xml:space="preserve">
    <value>調控</value>
  </data>
  <data name="DelaySeconds" xml:space="preserve">
    <value>{0} 秒</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>關於</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>下載 WinCompose {0}</value>
  </data>
  <data name="AboutBoxTitle" xml:space="preserve">
    <value>關於 WinCompose</value>
  </data>
  <data name="Programming" xml:space="preserve">
    <value>程式設計</value>
  </data>
  <data name="Translators" xml:space="preserve">
    <value>翻譯</value>
  </data>
  <data name="Authors" xml:space="preserve">
    <value>作者</value>
  </data>
  <data name="License" xml:space="preserve">
    <value>授權書</value>
  </data>
  <data name="NeedRestart" xml:space="preserve">
    <value>WinCompose 需重新啟動，變更才會生效。</value>
  </data>
  <data name="ReportBug" xml:space="preserve">
    <value>提報錯誤</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>說明</value>
  </data>
  <data name="UpdatesToolTip" xml:space="preserve">
    <value>有可用的更新。</value>
  </data>
  <data name="UserDefinedSequences" xml:space="preserve">
    <value>使用者自訂組合鍵</value>
  </data>
  <data name="UserDefinedSequencesEdit" xml:space="preserve">
    <value>編輯</value>
  </data>
  <data name="UserDefinedSequencesReload" xml:space="preserve">
    <value>重新載入</value>
  </data>
  <data name="AllowInjected" xml:space="preserve">
    <value>允許其他插入的鍵</value>
  </data>
  <data name="AllowInjectedToolTip" xml:space="preserve">
    <value>不忽略其他軟體如 Autohotkey 或 Synergy 送出的按鍵</value>
  </data>
  <data name="KeyPrint" xml:space="preserve">
    <value>Prt Scrn 鍵</value>
  </data>
  <data name="KeyDisabled" xml:space="preserve">
    <value>停用</value>
  </data>
  <data name="CheckUpdates" xml:space="preserve">
    <value>自動檢查更新</value>
  </data>
  <data name="CheckUpdatesToolTip" xml:space="preserve">
    <value>若啟用，WinCompose 會定期連上網路檢查是否有新版本。但不會自動安裝新版本。</value>
  </data>
  <data name="KeepIconVisible" xml:space="preserve">
    <value>試著讓通知區塊圖示一直可見</value>
  </data>
  <data name="KeepIconVisibleToolTip" xml:space="preserve">
    <value>Windows 預設一會兒之後移除通知區塊。此選項則努力使它出現。</value>
  </data>
  <data name="ChangeComposeKey" xml:space="preserve">
    <value>變更…</value>
  </data>
  <data name="CaptureComposeKey" xml:space="preserve">
    <value>請按一鍵作為首鍵。</value>
  </data>
  <data name="AddToFavorites" xml:space="preserve">
    <value>加到偏好</value>
  </data>
  <data name="DisableIcon" xml:space="preserve">
    <value>停用通知區圖示</value>
  </data>
  <data name="DisableIconToolTip" xml:space="preserve">
    <value>若啟用，WinCompose 不會在通知區顯示圖示。那麼，剩下能開啟 WinCompose 的是開始功能表中的 “WinCompose 設定” 與 “WinCompose 組合鍵” 兩項。</value>
  </data>
  <data name="KeyHome" xml:space="preserve">
    <value>Home 鍵</value>
  </data>
  <data name="KeyEnd" xml:space="preserve">
    <value>End 鍵</value>
  </data>
  <data name="KeyTab" xml:space="preserve">
    <value>定位鍵</value>
  </data>
  <data name="NoTimeout" xml:space="preserve">
    <value>全無逾時</value>
  </data>
  <data name="Advanced" xml:space="preserve">
    <value>進階</value>
  </data>
  <data name="IgnoreRegex" xml:space="preserve">
    <value>忽略視窗符合此字串類型式:</value>
  </data>
  <data name="IgnoreRegexToolTip" xml:space="preserve">
    <value>若目前視窗類或視窗名稱符合此字串類型式，WinCompose 就停用。</value>
  </data>
  <data name="AlwaysCompose" xml:space="preserve">
    <value>第二首鍵總是當第一首鍵用</value>
  </data>
  <data name="AlwaysComposeToolTip" xml:space="preserve">
    <value>若啟用，兩個首鍵都可作為組合鍵之首鍵。預設是只有第一個按下的鍵被當作首鍵，而另一首鍵則維持原始功能。</value>
  </data>
  <data name="SpecialThanks" xml:space="preserve">
    <value>特別感謝</value>
  </data>
  <data name="RemoveFromFavorites" xml:space="preserve">
    <value>移出偏好</value>
  </data>
  <data name="Favorites" xml:space="preserve">
    <value>偏好</value>
  </data>
  <data name="TimeoutToolTip" xml:space="preserve">
    <value>若設定，則在一段延遲後，也就是沒偵測到鍵盤活動，組合鍵就會取消。</value>
  </data>
  <data name="KeyboardLed" xml:space="preserve">
    <value>鍵盤 LED</value>
  </data>
  <data name="KeyboardLedToolTip" xml:space="preserve">
    <value>若設定，則按組合鍵時，對應的鍵盤 LED 會亮起來。</value>
  </data>
  <data name="KeyCompose" xml:space="preserve">
    <value>首鍵</value>
  </data>
  <data name="AutoLaunch" xml:space="preserve">
    <value>登入時，啟動 WinCompose</value>
  </data>
  <data name="AutoLaunchToolTip" xml:space="preserve">
    <value>若設定，使用者登入時，WinCompose 會被啟動。</value>
  </data>
  <data name="Accessibility" xml:space="preserve">
    <value>無障礙可用</value>
  </data>
  <data name="MustHoldCapsLock" xml:space="preserve">
    <value>按著不放大寫鎖定鍵才起作用</value>
  </data>
  <data name="MustHoldCapsLockToolTip" xml:space="preserve">
    <value>放開大寫鎖定鍵會立即停用它，而不是標準的必須再按一次才停用。</value>
  </data>
  <data name="RunElevated" xml:space="preserve">
    <value>以提升的權限來執行(推薦此)</value>
  </data>
  <data name="RunElevatedToolTip" xml:space="preserve">
    <value>在某些應用程式，若不以更高的權限執行 WinCompose，則組合鍵無作用。此選項可降低這種問題。</value>
  </data>
</root>
